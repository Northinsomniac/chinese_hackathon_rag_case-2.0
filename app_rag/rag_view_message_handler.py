import telebot
import re
from telebot import types

from app_rag.rag_presenter_app_bot import BotPresenter

message_error = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ /start. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–≤—Ç–æ—Ä–æ–º\n @sams3pi01"
class MessageHandler:

    def __init__(self, bot, presenter: BotPresenter):
        self.bot = bot
        self.presenter = presenter
        self.gif_message_id = None

    def handle_start(self, message):
        keyboard = types.ReplyKeyboardMarkup()
        button2 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å üìÖ")
        keyboard.add(button2)
        self.bot.reply_to(
            message,
            "üëã –ü—Ä–∏–≤–µ—Ç! ‰Ω†Â•ΩÔºÅ\n\n–Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∫–∏—Ç–∞–π—Å–∫–∏–º –°–ú–ò. \n\n–Ø —É–º–µ—é —á–∏—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –∫–∏—Ç–∞–π—Å–∫–æ–º –∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑ –Ω–∏—Ö –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n–ì–æ—Ç–æ–≤ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–∏—Ç–∞–π—Å–∫–∏–º –°–ú–ò!",
            reply_markup=keyboard,
        )

    def handle_message(self, message):
        if "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å" in message.text:
            self.choose_period(message)
        else:
            try:
                self.bot.reply_to(message, "–î–∞–π—Ç–µ –ø–æ–¥—É–º–∞—Ç—å...\n\n" + message.text)
                self.send_waiting_gif(message)
                gpt_response = self.presenter.send_query(message.text)
                # escaped_response = self.escape_markdown_v2(gpt_response)
                self.delete_gif_message(message)
                self.bot.reply_to(message, gpt_response)
            except Exception as ex:
                print(ex)
                self.bot.reply_to(message, message_error)

    def escape_markdown_v2(self, text):
        escape_chars = r'\_*[]()~`>#+-=|{}.!'
        return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)
    
    def start_discussion(self, message):
        # Placeholder for starting a new dialog with context saving
        self.bot.reply_to(
            message, "–ù–∞—á–∞—Ç–æ –Ω–æ–≤–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ üìù. (–ö–æ–Ω—Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.)"
        )

    def choose_period(self, message):
        # Placeholder for handling period selection
        self.bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 2016-2023:")
        self.bot.register_next_step_handler(message, self.get_year)

    def get_year(self, message):
        try:
            period = int(message.text)
            self.presenter.period = period
            self.bot.reply_to(message, f"–ì–æ–¥: {period} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –í–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –Ω–µ –ø–æ–∑–∂–µ {period} –≥–æ–¥–∞.")
        except Exception as ex:
            print(ex)
            self.bot.reply_to(message, f"–•–º...\n\n–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ.")

    def handle_help(self, message):
        self.bot.send_message(
            message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /help", parse_mode="html"
        )

    def send_waiting_gif(self, message):
        # Sending a GIF file to the user while waiting for GPT response
        gif_path = "/app/app_rag/sources/tom-ching-cheng-hanji.gif"  # Update with the actual path to your GIF file
        with open(gif_path, "rb") as gif:
            sent_message = self.bot.send_animation(message.chat.id, gif)
            self.gif_message_id = (
                sent_message.message_id
            )  # Store the message ID of the sent GIF

    def delete_gif_message(self, message):
        if self.gif_message_id:
            self.bot.delete_message(
                chat_id=message.chat.id, message_id=self.gif_message_id
            )
            self.gif_message_id = None
